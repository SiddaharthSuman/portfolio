/* stylelint-disable selector-class-pattern */
// grid.scss
// A responsive grid system that integrates with existing SCSS structure

@use 'sass:map';
@use 'sass:math';
@use './spacings' as spacings;
@use './mixins' as *;

// Grid settings
$grid-columns: 12;
$grid-gutter-width: 1.5rem; // 24px, matches spacing.lg

// Container
.container {
  inline-size: 100%;
  padding-inline: calc($grid-gutter-width / 2);
  margin-inline: auto;

  // Container max widths based on existing breakpoints
  @include breakpoint(sm) {
    max-inline-size: 100%;
  }

  @include breakpoint(md) {
    max-inline-size: 720px;
  }

  @include breakpoint(lg) {
    max-inline-size: 960px;
  }

  @include breakpoint(xl) {
    max-inline-size: 1140px;
  }

  @include breakpoint(xxl) {
    max-inline-size: 1320px;
  }
}

.container-fluid {
  inline-size: 100%;
  padding-inline: calc($grid-gutter-width / 2);
  margin-inline: auto;
}

// Row
.row {
  display: flex;
  flex-wrap: wrap;
  margin-inline: calc(-1 * ($grid-gutter-width / 2));
}

// No-gutters modifier for row
.row-no-gutters {
  margin-inline: 0;

  > [class*='col-'] {
    padding-inline: 0;
  }
}

// Column base styles
.col {
  position: relative;
  flex-grow: 1;
  flex-basis: 0;
  inline-size: 100%;
  max-inline-size: 100%;
  padding-inline: calc($grid-gutter-width / 2);
}

// Generate column classes for each breakpoint
@each $breakpoint-name, $breakpoint-value in spacings.$breakpoints {
  // Create base column class that will be used regardless of breakpoint
  .col-#{$breakpoint-name} {
    position: relative;
    inline-size: 100%;
    padding-inline: calc($grid-gutter-width / 2);
  }

  // Create numbered column classes for this breakpoint
  @for $i from 1 through $grid-columns {
    .col-#{$breakpoint-name}-#{$i} {
      position: relative;
      inline-size: 100%;
      padding-inline: calc($grid-gutter-width / 2);
    }
  }

  // Apply column styles at this breakpoint and above
  @include breakpoint($breakpoint-name) {
    // Flexbox column
    .col-#{$breakpoint-name} {
      flex-grow: 1;
      flex-basis: 0;
      max-inline-size: 100%;
    }

    // Numbered columns
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint-name}-#{$i} {
        flex: 0 0 math.percentage(calc($i / $grid-columns));
        max-inline-size: math.percentage(calc($i / $grid-columns));
      }
    }

    // Column ordering
    .order-#{$breakpoint-name}-first {
      order: -1;
    }

    .order-#{$breakpoint-name}-last {
      order: $grid-columns + 1;
    }

    @for $i from 0 through $grid-columns {
      .order-#{$breakpoint-name}-#{$i} {
        order: $i;
      }
    }

    // Column offset
    @for $i from 0 through ($grid-columns - 1) {
      .offset-#{$breakpoint-name}-#{$i} {
        margin-inline-start: math.percentage(calc($i / $grid-columns));
      }
    }
  }
}

// Responsive display utilities
@each $breakpoint-name, $breakpoint-value in spacings.$breakpoints {
  @include breakpoint($breakpoint-name) {
    .d-#{$breakpoint-name}-none {
      display: none !important;
    }

    .d-#{$breakpoint-name}-inline {
      display: inline !important;
    }

    .d-#{$breakpoint-name}-inline-block {
      display: inline-block !important;
    }

    .d-#{$breakpoint-name}-block {
      display: block !important;
    }

    .d-#{$breakpoint-name}-flex {
      display: flex !important;
    }

    .d-#{$breakpoint-name}-inline-flex {
      display: inline-flex !important;
    }

    .d-#{$breakpoint-name}-grid {
      display: grid !important;
    }
  }
}

// Flex utilities
.d-flex {
  display: flex !important;
}

.flex-row {
  flex-direction: row !important;
}

.flex-column {
  flex-direction: column !important;
}

.flex-row-reverse {
  flex-direction: row-reverse !important;
}

.flex-column-reverse {
  flex-direction: column-reverse !important;
}

.flex-wrap {
  flex-wrap: wrap !important;
}

.flex-nowrap {
  flex-wrap: nowrap !important;
}

.flex-wrap-reverse {
  flex-wrap: wrap-reverse !important;
}

.justify-content-start {
  justify-content: flex-start !important;
}

.justify-content-end {
  justify-content: flex-end !important;
}

.justify-content-center {
  justify-content: center !important;
}

.justify-content-between {
  justify-content: space-between !important;
}

.justify-content-around {
  justify-content: space-around !important;
}

.justify-content-evenly {
  justify-content: space-evenly !important;
}

.align-items-start {
  align-items: flex-start !important;
}

.align-items-end {
  align-items: flex-end !important;
}

.align-items-center {
  align-items: center !important;
}

.align-items-baseline {
  align-items: baseline !important;
}

.align-items-stretch {
  align-items: stretch !important;
}

.align-content-start {
  align-content: flex-start !important;
}

.align-content-end {
  align-content: flex-end !important;
}

.align-content-center {
  align-content: center !important;
}

.align-content-between {
  align-content: space-between !important;
}

.align-content-around {
  align-content: space-around !important;
}

.align-content-stretch {
  align-content: stretch !important;
}

.align-self-auto {
  align-self: auto !important;
}

.align-self-start {
  align-self: flex-start !important;
}

.align-self-end {
  align-self: flex-end !important;
}

.align-self-center {
  align-self: center !important;
}

.align-self-baseline {
  align-self: baseline !important;
}

.align-self-stretch {
  align-self: stretch !important;
}
