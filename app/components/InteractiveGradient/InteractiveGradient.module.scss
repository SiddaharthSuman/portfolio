/* stylelint-disable keyframes-name-pattern */
// components/InteractiveGradient/InteractiveGradient.module.scss
@use '../../styles/colors' as colors;
@use '../../styles/mixins' as *;

.gradientBackground {
  position: fixed;
  inset: 0;
  z-index: -1;
  inline-size: 100%;
  block-size: 100%;

  // overflow: hidden;
  background: linear-gradient(135deg, var(--color-background), var(--color-secondary-bg));

  // CSS custom property for intensity control
  --intensity: 0.8;
}

.svgBlur {
  display: none;
}

.noiseBg {
  position: absolute;
  inset-block-start: 0;
  inset-inline-start: 0;
  z-index: 1;
  inline-size: 100%;
  block-size: 100%;
  pointer-events: none;
  mix-blend-mode: soft-light;
  opacity: calc(0.2 * var(--intensity));
}

.gradientsContainer {
  position: absolute;
  inset: 0;
  inline-size: 100%;
  block-size: 100%;
  filter: url('#goo') blur(50px);
}

// Base gradient styles
.gradient {
  position: absolute;
  pointer-events: none;
  border-radius: 50%;
  mix-blend-mode: hard-light;
}

// Individual gradient elements
.g1 {
  inset-block-start: calc(50% - 50%);
  inset-inline-start: calc(50% - 20%);
  inline-size: 80%;
  block-size: 80%;
  background: radial-gradient(
    circle at center,
    rgba(
        var(--color-work-accent-rgb, #{colors.hexToRGB(colors.color-dark(work-accent))}),
        calc(0.8 * var(--intensity))
      )
      0,
    transparent 50%
  );
  transform-origin: center center;
  animation: moveVertical 30s ease infinite;
}

.g2 {
  inset-block-start: calc(50% - 40%);
  inset-inline-start: calc(50% - 40%);
  inline-size: 80%;
  block-size: 80%;
  background: radial-gradient(
    circle at center,
    rgba(
        var(--color-accent-secondary-rgb, #{colors.hexToRGB(colors.color-dark(accent-secondary))}),
        calc(0.7 * var(--intensity))
      )
      0,
    transparent 50%
  );
  transform-origin: calc(50% - 400px);
  animation: moveInCircle 25s reverse infinite;
}

.g3 {
  inset-block-start: calc(50% - 40% + 200px);
  inset-inline-start: calc(50% - 40% - 500px);
  inline-size: 80%;
  block-size: 80%;
  background: radial-gradient(
    circle at center,
    rgba(
        var(--color-accent-tertiary-rgb, #{colors.hexToRGB(colors.color-dark(accent-tertiary))}),
        calc(0.6 * var(--intensity))
      )
      0,
    transparent 50%
  );
  transform-origin: calc(50% + 400px);
  animation: moveInCircle 35s linear infinite;
}

.g4 {
  inset-block-start: calc(50% - 40%);
  inset-inline-start: calc(50% - 40%);
  inline-size: 80%;
  block-size: 80%;
  background: radial-gradient(
    circle at center,
    rgba(
        var(--color-error-rgb, #{colors.hexToRGB(colors.color-dark(error))}),
        calc(0.5 * var(--intensity))
      )
      0,
    transparent 50%
  );
  transform-origin: calc(50% - 200px);
  animation: moveHorizontal 40s ease infinite;
}

.g5 {
  inset-block-start: calc(50% - 60%);
  inset-inline-start: calc(50% - 60%);
  inline-size: 120%;
  block-size: 120%;
  background: radial-gradient(
    circle at center,
    rgba(
        var(--color-text-secondary-rgb, #{colors.hexToRGB(colors.color-dark(text-secondary))}),
        calc(0.4 * var(--intensity))
      )
      0,
    transparent 50%
  );
  transform-origin: calc(50% - 600px) calc(50% + 200px);
  animation: moveDiagonal 20s ease infinite;
}

.interactive {
  inline-size: 100%;
  block-size: 100%;
  background: radial-gradient(
    circle at center,
    rgba(
        var(--color-accent-rgb, #{colors.hexToRGB(colors.color-dark(accent))}),
        calc(0.6 * var(--intensity))
      )
      0,
    transparent 50%
  );
  opacity: calc(0.8 * var(--intensity));

  @include transition(opacity, 0.3s, ease);

  &:hover {
    opacity: var(--intensity);
  }
}

// Content overlay
.content {
  position: relative;
  z-index: 10;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  inline-size: 100%;
  block-size: 100%;
  padding: 2rem;
}

// Gradient variants
.warm {
  .g1 {
    background: radial-gradient(
      circle at center,
      rgba(
          var(--color-accent-rgb, #{colors.hexToRGB(colors.color-dark(accent))}),
          calc(0.9 * var(--intensity))
        )
        0,
      transparent 50%
    );
  }

  .g2,
  .g3 {
    background: radial-gradient(
      circle at center,
      rgba(
          var(--color-accent-tertiary-rgb, #{colors.hexToRGB(colors.color-dark(accent-tertiary))}),
          calc(0.6 * var(--intensity))
        )
        0,
      transparent 50%
    );
  }
}

.cool {
  .g1,
  .interactive {
    background: radial-gradient(
      circle at center,
      rgba(
          var(
            --color-accent-secondary-rgb,
            #{colors.hexToRGB(colors.color-dark(accent-secondary))}
          ),
          calc(0.8 * var(--intensity))
        )
        0,
      transparent 50%
    );
  }
}

.accent {
  .g1,
  .g2,
  .interactive {
    background: radial-gradient(
      circle at center,
      rgba(
          var(--color-accent-rgb, #{colors.hexToRGB(colors.color-dark(accent))}),
          calc(0.7 * var(--intensity))
        )
        0,
      transparent 50%
    );
  }
}

// Animations
@keyframes moveInCircle {
  0% {
    transform: rotate(0deg);
  }

  50% {
    transform: rotate(180deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

@keyframes moveVertical {
  0% {
    transform: translateY(-50%);
  }

  50% {
    transform: translateY(50%);
  }

  100% {
    transform: translateY(-50%);
  }
}

@keyframes moveHorizontal {
  0% {
    transform: translateX(-50%) translateY(-10%);
  }

  50% {
    transform: translateX(50%) translateY(10%);
  }

  100% {
    transform: translateX(-50%) translateY(-10%);
  }
}

@keyframes moveDiagonal {
  0% {
    transform: translateX(-50%) translateY(-50%);
  }

  50% {
    transform: translateX(50%) translateY(50%);
  }

  100% {
    transform: translateX(-50%) translateY(-50%);
  }
}

// Responsive adjustments
@include breakpoint(md) {
  .gradientsContainer {
    filter: url('#goo') blur(40px);
  }
}

@include breakpoint(sm) {
  .gradientsContainer {
    filter: url('#goo') blur(35px);
  }

  // .g1,
  .g2,
  .g3,
  .g4 {
    inset-block-start: calc(50% - 50%);
    inset-inline-start: calc(50% - 50%);
    inline-size: 100%;
    block-size: 100%;
  }
}

// Performance optimizations
@media (prefers-reduced-motion: reduce) {
  .gradient {
    animation-duration: 60s;
  }

  .interactive {
    transition: none;
  }
}

// Disable animations on low-power devices
@media (hover: none) {
  .gradient {
    animation-play-state: paused;
  }
}
